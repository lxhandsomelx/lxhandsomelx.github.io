<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2020/05/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to my Blog</p>
<h1 id="第一篇博客文章"><a href="#第一篇博客文章" class="headerlink" title="第一篇博客文章"></a>第一篇博客文章</h1><p>&emsp; &emsp; 学习windows环境下hexo博客的搭建</p>
<h2 id="1-软件安装"><a href="#1-软件安装" class="headerlink" title="1. 软件安装"></a>1. 软件安装</h2><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><h2 id="2-创建github账号，并创建usename-gethub-io仓库"><a href="#2-创建github账号，并创建usename-gethub-io仓库" class="headerlink" title="2. 创建github账号，并创建usename. gethub. io仓库"></a>2. 创建github账号，并创建usename. gethub. io仓库</h2><h2 id="3-本地搭建hexo博客"><a href="#3-本地搭建hexo博客" class="headerlink" title="3. 本地搭建hexo博客"></a>3. 本地搭建hexo博客</h2><h3 id="在电脑上创建一个存放博客的文件夹"><a href="#在电脑上创建一个存放博客的文件夹" class="headerlink" title="在电脑上创建一个存放博客的文件夹"></a>在电脑上创建一个存放博客的文件夹</h3><h3 id="在该文件夹下右键-git-bash-here"><a href="#在该文件夹下右键-git-bash-here" class="headerlink" title="在该文件夹下右键 -git bash here"></a>在该文件夹下右键 -git bash here</h3><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<h3 id="之后输入"><a href="#之后输入" class="headerlink" title="之后输入"></a>之后输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="在浏览器中访问http-localhost-4000即可看到博客页面"><a href="#在浏览器中访问http-localhost-4000即可看到博客页面" class="headerlink" title="在浏览器中访问http://localhost:4000即可看到博客页面"></a>在浏览器中访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>即可看到博客页面</h3><h2 id="4-将博客托管到github上"><a href="#4-将博客托管到github上" class="headerlink" title="4. 将博客托管到github上"></a>4. 将博客托管到github上</h2><h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><p> 为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure>

<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到. ssh\id_rsa. pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br><img src="/2020/05/28/hello-world/1.png" alt="first"></p>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>

<p> 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi liuxianan! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;liuxianan&quot;&#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>

<h3 id="修改配置-config-yml"><a href="#修改配置-config-yml" class="headerlink" title="修改配置_config. yml"></a>修改配置_config. yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;lxhandsomelx&#x2F;lxhandsomelx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h3 id="hexo相关命令"><a href="#hexo相关命令" class="headerlink" title="hexo相关命令"></a>hexo相关命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">&#x2F;&#x2F;缩写</span><br><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br><span class="line">&#x2F;&#x2F;组合命令</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>

<h2 id="美图"><a href="#美图" class="headerlink" title="美图"></a>美图</h2><p><img src="/2020/05/28/hello-world/aaa.jpg" alt="niceimg"></p>
]]></content>
  </entry>
  <entry>
    <title>servlet学习1</title>
    <url>/2020/06/24/servlet/</url>
    <content><![CDATA[<h1 id="servlet入门"><a href="#servlet入门" class="headerlink" title="servlet入门"></a>servlet入门</h1><p>&emsp;&emsp;学习servlet</p>
<h2 id="1-用eclipse创建web项目"><a href="#1-用eclipse创建web项目" class="headerlink" title="1.用eclipse创建web项目"></a>1.用eclipse创建web项目</h2><h2 id="2-在java-Resources下新建servlet包"><a href="#2-在java-Resources下新建servlet包" class="headerlink" title="2.在java Resources下新建servlet包"></a>2.在java Resources下新建servlet包</h2><h2 id="3-创建class实现servlet接口（直接创建servlet类）"><a href="#3-创建class实现servlet接口（直接创建servlet类）" class="headerlink" title="3.创建class实现servlet接口（直接创建servlet类）"></a>3.创建class实现servlet接口（直接创建servlet类）</h2><ul>
<li>实现service类</li>
</ul>
<h2 id="4-在web-xml进行servlet配置（ide自动生成）"><a href="#4-在web-xml进行servlet配置（ide自动生成）" class="headerlink" title="4.在web.xml进行servlet配置（ide自动生成）"></a>4.在web.xml进行servlet配置（ide自动生成）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">	&lt;servlet-name&gt;firsttest&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	&lt;servlet-class&gt;testserver.firsttest&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">	&lt;servlet-name&gt;firsttest&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	&lt;url-pattern&gt;&#x2F;ad&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在浏览器中访问<a href="http://localhost:8080/项目名称/ad" target="_blank" rel="noopener">http://localhost:8080/项目名称/ad</a>即可访问servlet</li>
</ul>
<h2 id="美图"><a href="#美图" class="headerlink" title="美图"></a>美图</h2><p><img src="/2020/06/24/servlet/1.jpg" alt="1"></p>
]]></content>
  </entry>
  <entry>
    <title>servlet学习2</title>
    <url>/2020/06/27/servlet1/</url>
    <content><![CDATA[<h1 id="servlet配置详解"><a href="#servlet配置详解" class="headerlink" title="servlet配置详解"></a>servlet配置详解</h1><p>&emsp; &emsp; 学习servlet详细配置</p>
<h2 id="1-servlet及servlet-mapping基本配置"><a href="#1-servlet及servlet-mapping基本配置" class="headerlink" title="1. servlet及servlet-mapping基本配置"></a>1. servlet及servlet-mapping基本配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;firsttest&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;testserver.firsttest&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;firsttest&lt;&#x2F;servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;ad&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中servlet及servlet-mapping的servlet-name要一致</li>
<li>servlet-class为完整类名</li>
<li>url-pattern为访问路径例如：localhost：8080/项目名/ad(url-pattern)</li>
</ul>
<h2 id="2-url-pattern细节配置"><a href="#2-url-pattern细节配置" class="headerlink" title="2. url-pattern细节配置"></a>2. url-pattern细节配置</h2><p><img src="/2020/06/27/servlet1/1.jpg" alt="1"></p>
<h2 id="3-servlet服务器启动实例化配置与缺省配置"><a href="#3-servlet服务器启动实例化配置与缺省配置" class="headerlink" title="3. servlet服务器启动实例化配置与缺省配置"></a>3. servlet服务器启动实例化配置与缺省配置</h2><p><img src="/2020/06/27/servlet1/2.jpg" alt="2"></p>
<ul>
<li>其中servlet缺省配置会影响静态资源匹配，因为服务器进行资源访问是经过默认缺省servlet类进行查找的</li>
</ul>
<h2 id="4-导航页面配置"><a href="#4-导航页面配置" class="headerlink" title="4. 导航页面配置"></a>4. 导航页面配置</h2><p><img src="/2020/06/27/servlet1/3.jpg" alt="3"></p>
<h2 id="美图"><a href="#美图" class="headerlink" title="美图"></a>美图</h2><p><img src="/2020/06/27/servlet1/4.jpg" alt="4"></p>
]]></content>
  </entry>
</search>
